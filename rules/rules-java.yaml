rules:
  - id: JAVA_CONVENTIONS_001
    severity: warning
    hint: "Follow Java naming conventions: lowercase for packages, PascalCase for classes, ALL_CAPS for constants, camelCase for variables."

  - id: LAMBDAS_STREAMS_002
    severity: warning
    hint: "Use lambdas and streams for cleaner, functional-style code instead of imperative loops."

  - id: NULL_HANDLING_003
    severity: error
    hint: "Avoid returning null. Use Optional, null checks, or annotations like @Nullable/@NonNull to prevent NullPointerExceptions."

  - id: MUTABLE_STATE_004
    severity: error
    hint: "Avoid exposing mutable internal state; return defensive copies and clone inputs in constructors."

  - id: EXCEPTION_HANDLING_005
    severity: error
    hint: "Catch specific exceptions before general ones. Use checked exceptions for recoverable scenarios."

  - id: DATA_STRUCTURE_CHOICE_006
    severity: warning
    hint: "Use the most appropriate Java collection type (Map, List, Set) depending on your needs."

  - id: ACCESS_CONTROL_007
    severity: warning
    hint: "Default to private for fields and methods unless access by other classes is explicitly required."

  - id: CODE_TO_INTERFACE_008
    severity: info
    hint: "Declare variables and parameters using interface types (e.g., List) rather than implementations (e.g., ArrayList)."

  - id: AVOID_UNNEEDED_INTERFACE_009
    severity: info
    hint: "Donâ€™t define interfaces unless there is a need for multiple implementations or polymorphism."

  - id: EQUALS_HASHCODE_010
    severity: error
    hint: "Override hashCode() when equals() is overridden to ensure correct behavior in Hash-based collections."
